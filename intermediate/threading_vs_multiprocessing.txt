
PROCESS: An instance of a program (e.g. a Python interpreter, Firefox browser)

+ Takes advantage of multiple CPUs and cores
+ Separate memory space -> memory is not shared between processes
+ Great for CPU-bound processing
    (large amount of data with expensive computations - run od different CPUs and speed up the code)
+ New process is started independently of other processes
+ Processes are interruptable/killable
+ One GIL for each process -> avoids GIL limitation

- Heavyweight
- Starting a process is slower than starting a thread
- More memory
- IPC (inter-process communication) is more complicated


THREADS: An entity within a process that can be scheduled (also known as "lightweight" process)
A process can spawn multiple threads

+ All threads within a process share the same memory
+ Lightweight
+ Starting a thread is faster than starting a process
+ Great for I/O-bound tasks (while waiting for a device it can switch to other thread to save time)

- Threading is limited by GIL: only one thread at a time
- No effects for CPU-bound tasks
- Not interruptable/killable
- Careful with race conditions
    (two or more threads want to modify the same variable at the same time, can cause crashes)

GIL: Global interpreter lock
* A lock that allows only one thread at a time to execute in Python

* Needed in CPython because memory management si not thread-safe

* Avoid the GIL by:
    * use multiprocessing
    * use a different, free-threaded Python implementation (Jython, IronPython)
    * use Python as a wrapper for third-party libraries (C/C++) -> numpy, scipy
